{"version":3,"sources":["logo.svg","store.js","App.js","serviceWorker.js","indexApp.js","adalConfig.js","index.js"],"names":["module","exports","__webpack_require__","p","initialState","aadResponse","basicReduxStore","createStore","state","arguments","length","undefined","action","type","Object","objectSpread","payload","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getSchoolDetails","fetch","then","response","text","results","console","log","setState","schoolName","catch","error","JSON","stringify","react_default","a","createElement","className","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","es","store","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","adalConfig","tenant","clientId","endpoints","api","cacheLocation","authContext","AuthenticationContext","withAdalLogin","runWithAdal","require"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wJCElCC,EAAe,CACnBC,YAAa,MAcFC,EAAkBC,YAXX,WAAkC,IAAjCC,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBL,EAAcQ,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACpD,OAAQC,EAAOC,MACb,IAAK,oBACH,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,YAAaO,EAAOI,UACzC,IAAK,qBACH,OAAOF,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,YAAa,OAClC,QACE,OAAOG,qDC+BES,2BAvCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAL,OAAAM,EAAA,EAAAN,CAAAO,KAAAJ,IACjBE,EAAAL,OAAAQ,EAAA,EAAAR,CAAAO,KAAAP,OAAAS,EAAA,EAAAT,CAAAG,GAAAO,KAAAH,KAAMH,KAMRO,iBAAmB,WAEjBC,MADU,4EAEPC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJC,QAAQC,IAAI,cAAgBF,GAC5BX,EAAKc,SAAS,CAAEC,WAAYJ,MAE7BK,MAAM,SAAAC,GACLL,QAAQC,IAAI,YAAcK,KAAKC,UAAUF,OAd7CjB,EAAKX,MAAQ,CACX0B,WAAY,IAHGf,mFAqBjBE,KAAKI,oDAIL,OACEc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAEhBH,EAAAC,EAAAC,cAAA,kCAA0BpB,KAAKb,MAAM0B,qBA9B7BS,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCRnCC,IAASC,OACPZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAUC,MAAO/C,GACfiC,EAAAC,EAAAC,cAACa,EAAD,OAEFC,SAASC,eAAe,SD6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC,kEE1HNC,EAAa,CACxBC,OAAQ,uCACRC,SAAU,uCACVC,UAAW,CACTC,IAAK,wCAEPC,cAAe,gBAGJC,EAAc,IAAIC,wBAAsBP,GAKrBQ,wBAAcF,EAAaN,EAAWG,UAAUC,KCXhFK,sBACEH,EACA,WAEEI,EAAQ,MANS","file":"static/js/main.a59cc1d3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { createStore } from \"redux\";\n\nconst initialState = {\n  aadResponse: null\n};\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"AAD_LOGIN_SUCCESS\":\n      return { ...state, aadResponse: action.payload };\n    case \"AAD_LOGOUT_SUCCESS\":\n      return { ...state, aadResponse: null };\n    default:\n      return state;\n  }\n};\n\nexport const basicReduxStore = createStore(rootReducer);\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      schoolName: \"\"\n    };\n  }\n\n  getSchoolDetails = () => {\n    var url = \"http://localhost:5000/getSchoolName?username=sushant@ecinfosolutions.com\";\n    fetch(url)\n      .then(response => response.text())\n      .then(results => {\n        console.log(\"results @@ \" + results);\n        this.setState({ schoolName: results });\n      })\n      .catch(error => {\n        console.log(\"error @@ \" + JSON.stringify(error));\n      });\n  };\n\n  componentDidMount() {\n    this.getSchoolDetails();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n          <p>Your School name is : {this.state.schoolName}</p>\n          {/* <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n            Learn React\n          </a> */}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { basicReduxStore } from \"./store\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={basicReduxStore}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n","import { AuthenticationContext, adalFetch, withAdalLogin } from \"react-adal\";\n\nexport const adalConfig = {\n  tenant: \"0b860171-b0f1-45fe-a224-d66f23c2d639\",\n  clientId: \"72ed5f17-7eaa-4e8a-bfbe-49b67071e900\",\n  endpoints: {\n    api: \"1744a733-db16-4fc1-8255-d5b886c0c7f4\"\n  },\n  cacheLocation: \"localStorage\"\n};\n\nexport const authContext = new AuthenticationContext(adalConfig);\n\nexport const adalApiFetch = (fetch, url, options) =>\n  adalFetch(authContext, adalConfig.endpoints.api, fetch, url, options);\n\nexport const withAdalLoginApi = withAdalLogin(authContext, adalConfig.endpoints.api);\n","import { runWithAdal } from \"react-adal\";\nimport { authContext } from \"./adalConfig\";\n\nconst DO_NOT_LOGIN = false;\n\nrunWithAdal(\n  authContext,\n  () => {\n    // eslint-disable-next-line\n    require(\"./indexApp.js\");\n  },\n  DO_NOT_LOGIN\n);\n"],"sourceRoot":""}